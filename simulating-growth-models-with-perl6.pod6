=begin pod :tag<perl6>
=TITLE Simulating growth models with Perl 6
=SUBTITLE An example on how to use Math::Model and Math::RungeKutta to plot EDO's solution
=head1 Introduction

Perl6 is an amazing programming language, and of course, you can do a lot of cool maths with it (If you are here, definetly be sure to check L<Doing math with Perl 6|https://docs.perl6.org/language/math>).
As an applied mathematician, a great amount of my job is to simulate how my models are doing. For this reason, in every coding language, a numerical integrator is a must-have. 
Learning about how to do this in Perl6 can easily be a good way to have a nice goal while learning a new coding language. 

=head1 Requeriments

In Perl6 there are some modules in the ecosystem can do the job we want in a very easy way :
=item L<C<Math::Model>|https://github.com/moritz/Math-Model>
which lets you write mathematical and physical models in an easy and natural way.
=item L<C<Math::RungeKutta>|https://github.com/moritz/Math-RungeKutta>
Runge-Kutta integration for systems of ordinary, linear differential equations.

For this example we are going to use L<C<Math::Model>|https://github.com/moritz/Math-Model> because its useful sintaxis, but remember that this module requires L<C<Math::RungeKutta>|https://github.com/moritz/Math-RungeKutta> as well. In the future it should be a nice idea to add other modules.

=head1 The first model

Let's start with the I<'Hello World'> of mathematical Ecology: L<Malthusian growth model|https://en.wikipedia.org/wiki/Malthusian_growth_model>. 
A Malthusian growth model, sometimes called a simple exponential growth model, is essentially exponential growth based on the idea of the function being proportional to the speed to which the function grows.
The equation, then, looks like this: 

I<dx/dt = g*x>

I<x(0) = 1> 

Where g is the population growth rate, sometimes called Malthusian parameter.

How can we translate that into Perl6? Well Math::Model bring some help with a very undestable way to do that, let's see it:

=begin code
use v6;
use Math::Model;

my $m = Math::Model.new(
    derivatives => {
        velocity     => 'x',
    },
    variables   => {
        velocity           => { $:growth_constant * $:x},
        growth_constant    => { 1 },   # basal growth rate
    },
    initials    => {
        x       => 3,
    },
    captures    => ('x'),
);

$m.integrate(:from(0), :to(8), :min-resolution(0.5));
$m.render-svg('population growth malthus.svg', :title('population growth'));
=end code

To fully understand what is going on, let me explain it step by step.

=head2 Step by step explanation.
=item First we declare the use of Perl6 and load the module that make the calculations: L<C<Math::Model>|https://github.com/moritz/Math-Model>.

=begin code
use v6;
use Math::Model;
=end code

=item We create and model adding all the information.

=begin code
	my $m = Math::Model.new(
=end code

=item We declare the derivatives that are in our model. In this case, if you remember our equation, we have our variable I<x> and its derivative I<x'> (usually know as the velocity).

=begin code
	derivatives => {
	        velocity     => 'x',
	    },
=end code

=item After that, we declare how our models evolve. We just need formulas for the derivatives that are not also integration variables (in this case, only I<x>), and for other variables we use in the formulas (the growth rate).

=begin code
    variables   => {
        velocity           => { $:growth_constant * $:x},
        growth_constant    => { 1 },   # basal growth rate
    },
=end code


=item Finally we declare our initial conditions and use I<captures> to tell L<C<Math::Model>|https://github.com/moritz/Math-Model> which variable or variables to record while the simulation is running.

=begin code
    initials    => {
        x       => 3,
    },
    captures    => ('x'),
=end code



At this point our model is set. We need to run the simulation and render a cool plot about our results:
=begin code
$m.integrate(:from(0), :to(8), :min-resolution(0.5));
$m.render-svg('population growth malthus.svg', :title('population growth'));
=end code

There, we select our time limits and the resolution. Next, we generate a plot.
All understood? Well, let's see our result!

L<link to the image?|www.google.es>

Looks great! But to be honest, it is quit unrepresentative. Let's explore other examples from more complex situations!

=head1 Logistic model

Resources aren't infinite and our population is not going to grow forever. P-F Verhulst thought the smae thing so he presented the L<logistic model|https://en.wikipedia.org/wiki/Logistic_function>. this model is a common model of population growth, where the rate of reproduction is proportional to both the existing population and the amount of available resources, all else being equal.
It looks like this: 

I<dx/dt = g*x*(1-x/k)>
I<x(0)=1>

where the constant g defines the growth rate and k is the carrying capacity. 
Modifying the above code we can simulate its behaviour in time:

=begin code
use v6;
use Math::Model;

my $m = Math::Model.new(
    derivatives => {
        velocity     => 'x',
    },
    variables   => {
        velocity           => { $:growth_constant * $:x - $:growth_constant * $:x * $:x / $:k },
        growth_constant    => { 1 },   # basal growth rate
	k                  => { 100 }, # carrying capacity
    },
    initials    => {
        x       => 3,
    },
    captures    => ('x'),
);

$m.integrate(:from(0), :to(8), :min-resolution(0.5));
$m.render-svg('population growth logistic.svg', :title('population growth'));
=end code

Let's look at our cool plot:
L<link to the image?|www.google.es>

As you can see population growths till a maximum. 

=head1 Alle Effect

Interesting, isn't it? Even if these equations seem basic they are linked to a lot of behaviours in our world, like tumor growth. But, before end, let me show you a curius case.
Logistic model could be accurate but... What happens when, from a certain threshold, the population size is so small that the survival rate and / or the reproductive rate drops due to the individuals' inhability to find other ones? 

Well, this is and interesting phenomenon described by W.C.Alle, usually known as L<Allee effect|https://en.wikipedia.org/wiki/Allee_effect>.
A simple way to obtain different behaviours associated with this effect is to use the logistic model as a departure, add some terms, and get a cubic growth model like this one:

I<dx/dt=r*x*(x/a-1)*(1-x/k)>

where all the constants are the same as before and A is called I<critical point>.

Our code would be:

=begin code
use v6;
use Math::Model;

my $m = Math::Model.new(
    derivatives => {
        velocity_x    => 'x',
    },
    variables   => {
        velocity_x           => { $:growth_constant * $:x *($:x/$:a -1)*(1- $:x/$:k) },
        growth_constant    => { 0.7 },   # basal growth rate
	k                  => { 100 }, # carrying capacity
	a		   => { 20 },  # critical point
    },
    initials    => {
        x       => 15,
    },
    captures    => ('x'),
);

$m.integrate(:from(0), :to(100), :min-resolution(0.5));
$m.render-svg('population growth alle.svg', :title('population growth'));
=end code

=head1 Extra info.

Do you like physics? Check the original post by the creator of the modules I have used, Moritz Lenz: L<https://perlgeek.de/blog-en/perl-6/physical-modelling.html>
Do you want more maths with Perl 6? check JJ Merelo's post about them: L<Doing math with Perl 6|https://docs.perl6.org/language/math>

=end pod

#vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6


